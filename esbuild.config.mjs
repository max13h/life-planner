import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import { watch } from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`
;

const prod = (process.argv[2] === "production");

// CSS bundling function
async function buildCSS() {
    const result = await esbuild.build({
        entryPoints: ['src/css/index.css'],
        bundle: true,
        outfile: 'styles.css',
        logLevel: "info",
        minify: prod,
    });
    return result;
}

// Watch CSS files for changes
function watchCSS() {
    const cssDir = path.join(process.cwd(), 'src', 'css');

    // Watch the entire css directory recursively
    watch(cssDir, { recursive: true }, async (eventType, filename) => {
        if (filename && filename.endsWith('.css')) {
            try {
                console.log(`CSS change detected in ${filename}`);
                await buildCSS();

                // Touch main.js to trigger Obsidian's reload
                const time = new Date();
                await fs.utimes('main.js', time, time).catch(console.error);

                console.log('CSS rebuilt and plugin reloaded');
            } catch (error) {
                console.error('Error rebuilding CSS:', error);
            }
        }
    });
}

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    minify: prod,
    plugins: [{
        name: 'css-bundle',
        setup(build) {
            build.onEnd(async () => {
                await buildCSS();
                console.log('CSS bundled');
            });
        },
    }],
});

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
    watchCSS(); // Start CSS watcher in development mode
}